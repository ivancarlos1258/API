// <auto-generated />
using System;
using API.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Infra.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250312193601_EstruturaInicial")]
    partial class EstruturaInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Domain.TableModels.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrincoRfid")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Foto")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Lote")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Mae")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Pai")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<int>("Raca")
                        .HasColumnType("integer");

                    b.Property<Guid>("RebanhoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sexo")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("IsAtivo");

                    b.HasIndex("RebanhoId");

                    b.ToTable("Animal");
                });

            modelBuilder.Entity("API.Domain.TableModels.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.HasIndex("Estado");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("API.Domain.TableModels.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.HasIndex("IsAtivo");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("API.Domain.TableModels.Fazenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CidadeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("IsAtivo");

                    b.ToTable("Fazenda");
                });

            modelBuilder.Entity("API.Domain.TableModels.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("IsAtivo");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("API.Domain.TableModels.Grupo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("IsAtivo");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("API.Domain.TableModels.MovimentacaoAnimal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<int>("SistemaProdutivo")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("ClienteId");

                    b.ToTable("MovimentacaoAnimal");
                });

            modelBuilder.Entity("API.Domain.TableModels.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid?>("PermissaoMinima")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecaoPermissaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Chave");

                    b.HasIndex("SecaoPermissaoId");

                    b.ToTable("Permissao");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4171b83-d02c-411e-8122-12cb87c580c9"),
                            Chave = "gestao_usuarios",
                            Nome = "Gestão de Usuários",
                            SecaoPermissaoId = new Guid("d2d6aa46-fbef-470d-aacf-77260d2951e4")
                        },
                        new
                        {
                            Id = new Guid("6241019e-65f6-43a7-9974-0c661bd3bd46"),
                            Chave = "gestao_grupos_permissoes",
                            Nome = "Gestão de Grupos e Permissões",
                            SecaoPermissaoId = new Guid("d2d6aa46-fbef-470d-aacf-77260d2951e4")
                        });
                });

            modelBuilder.Entity("API.Domain.TableModels.PesagemAnimal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(15, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("ClienteId");

                    b.ToTable("PesagemAnimal");
                });

            modelBuilder.Entity("API.Domain.TableModels.Picket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacidade")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<Guid>("FazendaId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Hectares")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("TipoPastagem")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FazendaId");

                    b.HasIndex("IsAtivo");

                    b.ToTable("Picket");
                });

            modelBuilder.Entity("API.Domain.TableModels.Rebanho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("PicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("IsAtivo");

                    b.HasIndex("PicketId");

                    b.ToTable("Rebanho");
                });

            modelBuilder.Entity("API.Domain.TableModels.SecaoPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("SecaoPermissao");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2d6aa46-fbef-470d-aacf-77260d2951e4"),
                            Nome = "Administração"
                        });
                });

            modelBuilder.Entity("API.Domain.TableModels.TratamentoAnimal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescricaoCurta")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("DescricaoLonga")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("ClienteId");

                    b.ToTable("TratamentoAnimal");
                });

            modelBuilder.Entity("API.Domain.TableModels.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAdministrador")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRedefinirSenha")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("date");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<Guid?>("TokenRecuperacaoSenha")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ValidadeRecuperacaoSenha")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("Email");

                    b.HasIndex("IsAtivo");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89186c8a-3892-47e6-885e-c376d53d15b1"),
                            Cpf = "00000000000",
                            Email = "teste.teste@rumosolucoes.com",
                            IsAdministrador = true,
                            IsAtivo = true,
                            IsRedefinirSenha = false,
                            Nascimento = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Usuário Teste",
                            Senha = "ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413",
                            Telefone = "00000000"
                        });
                });

            modelBuilder.Entity("GrupoPermissao", b =>
                {
                    b.Property<Guid>("GruposId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissoesId")
                        .HasColumnType("uuid");

                    b.HasKey("GruposId", "PermissoesId");

                    b.HasIndex("PermissoesId");

                    b.ToTable("GrupoPermissao");
                });

            modelBuilder.Entity("GrupoUsuario", b =>
                {
                    b.Property<Guid>("GruposId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuariosId")
                        .HasColumnType("uuid");

                    b.HasKey("GruposId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("GrupoUsuario");
                });

            modelBuilder.Entity("API.Domain.TableModels.Animal", b =>
                {
                    b.HasOne("API.Domain.TableModels.Rebanho", "Rebanho")
                        .WithMany("Animais")
                        .HasForeignKey("RebanhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rebanho");
                });

            modelBuilder.Entity("API.Domain.TableModels.Fazenda", b =>
                {
                    b.HasOne("API.Domain.TableModels.Cidade", "Cidade")
                        .WithMany("Fazendas")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("API.Domain.TableModels.MovimentacaoAnimal", b =>
                {
                    b.HasOne("API.Domain.TableModels.Animal", "Animal")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("API.Domain.TableModels.Permissao", b =>
                {
                    b.HasOne("API.Domain.TableModels.SecaoPermissao", "SecaoPermissao")
                        .WithMany("Permissoes")
                        .HasForeignKey("SecaoPermissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecaoPermissao");
                });

            modelBuilder.Entity("API.Domain.TableModels.PesagemAnimal", b =>
                {
                    b.HasOne("API.Domain.TableModels.Animal", "Animal")
                        .WithMany("Pesagens")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("API.Domain.TableModels.Picket", b =>
                {
                    b.HasOne("API.Domain.TableModels.Fazenda", "Fazenda")
                        .WithMany("Pickets")
                        .HasForeignKey("FazendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fazenda");
                });

            modelBuilder.Entity("API.Domain.TableModels.Rebanho", b =>
                {
                    b.HasOne("API.Domain.TableModels.Picket", "Picket")
                        .WithMany("Rebanhos")
                        .HasForeignKey("PicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picket");
                });

            modelBuilder.Entity("API.Domain.TableModels.TratamentoAnimal", b =>
                {
                    b.HasOne("API.Domain.TableModels.Animal", "Animal")
                        .WithMany("Tratamentos")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("GrupoPermissao", b =>
                {
                    b.HasOne("API.Domain.TableModels.Grupo", null)
                        .WithMany()
                        .HasForeignKey("GruposId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.TableModels.Permissao", null)
                        .WithMany()
                        .HasForeignKey("PermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrupoUsuario", b =>
                {
                    b.HasOne("API.Domain.TableModels.Grupo", null)
                        .WithMany()
                        .HasForeignKey("GruposId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.TableModels.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.TableModels.Animal", b =>
                {
                    b.Navigation("Movimentacoes");

                    b.Navigation("Pesagens");

                    b.Navigation("Tratamentos");
                });

            modelBuilder.Entity("API.Domain.TableModels.Cidade", b =>
                {
                    b.Navigation("Fazendas");
                });

            modelBuilder.Entity("API.Domain.TableModels.Fazenda", b =>
                {
                    b.Navigation("Pickets");
                });

            modelBuilder.Entity("API.Domain.TableModels.Picket", b =>
                {
                    b.Navigation("Rebanhos");
                });

            modelBuilder.Entity("API.Domain.TableModels.Rebanho", b =>
                {
                    b.Navigation("Animais");
                });

            modelBuilder.Entity("API.Domain.TableModels.SecaoPermissao", b =>
                {
                    b.Navigation("Permissoes");
                });
#pragma warning restore 612, 618
        }
    }
}
